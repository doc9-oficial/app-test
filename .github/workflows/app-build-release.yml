name: Build e Release App

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    # Garantir que o job tenha permissões para criar releases
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extrair dados do manifest
        id: manifest
        run: |
          APP_NAME=$(jq -r '.name' manifest.json)
          VERSION=$(jq -r '.version' manifest.json)
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Increment version, create tag and generate changelog when pushing to main
      - name: Build
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Criar ZIP e fazer upload
        id: create_zip
        run: |
          # Usa a versão do manifest como fallback
          APP_NAME="${{ steps.manifest.outputs.app_name }}"
          VERSION="${{ steps.manifest.outputs.version }}"
          # Se o workflow foi disparado por uma tag, extrai o número sem o 'v' inicial
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            # shell substitution para remover leading 'v' se presente
            REF_NAME="${GITHUB_REF_NAME:-${{ github.ref_name }}}"
            VERSION="${REF_NAME#v}"
          fi
          ZIP_NAME="app-${APP_NAME}-${VERSION}.zip"
          echo "Criando ZIP para $APP_NAME versão $VERSION"
          zip -r "$ZIP_NAME" dist manifest.json README.md || true
          echo "zip_file=$ZIP_NAME" >> $GITHUB_OUTPUT

      # Criar release quando a versão é incrementada automaticamente
      - name: Criar release (tags) ou upload (main)
        if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name != '' && startsWith(github.ref, 'refs/tags/v') && github.ref_name || 'latest' }}
          name: "${{ steps.manifest.outputs.app_name }} ${{ github.ref_name != '' && startsWith(github.ref, 'refs/tags/v') && github.ref_name || 'latest' }}"
          body: "Build gerado automaticamente for ${{ github.ref }}"
          artifacts: "${{ steps.create_zip.outputs.zip_file }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          # Permitir atualizar release existente se a tag já existir
          allowUpdates: true
          replacesArtifacts: true
          makeLatest: true
          generateReleaseNotes: false
